angular.module("angularMapbox",[]),angular.module("angularMapbox").directive("featureLayer",function(){return{restrict:"E",require:"^mapbox",link:function(scope,element,attrs,controller){attrs.data?controller.getMap().then(function(map){var geojsonObject=scope.$eval(attrs.data),featureLayer=L.mapbox.featureLayer(geojsonObject).addTo(map);controller.$scope.featureLayers.push(featureLayer)}):attrs.url&&controller.getMap().then(function(map){var featureLayer=L.mapbox.featureLayer().addTo(map);featureLayer.loadURL(attrs.url),controller.$scope.featureLayers.push(featureLayer)})}}}),angular.module("angularMapbox").directive("mapbox",["$compile","$q",function($compile,$q){var _mapboxMap;return{restrict:"E",transclude:!0,scope:!0,replace:!0,link:function(scope,element,attrs){scope.map=L.mapbox.map(element[0],attrs.mapId),_mapboxMap.resolve(scope.map);var mapWidth=attrs.width||500,mapHeight=attrs.height||500;element.css("width",mapWidth+"px"),element.css("height",mapHeight+"px");var zoom=attrs.zoom||12;attrs.lat&&attrs.lng&&scope.map.setView([attrs.lat,attrs.lng],zoom),scope.isClusteringMarkers=void 0!==attrs.clusterMarkers;var shouldRefitMap=void 0!==attrs.scaleToFit;scope.fitMapToMarkers=function(){if(shouldRefitMap){var group=new L.featureGroup(scope.markers);scope.map.fitBounds(group.getBounds())}},attrs.onReposition&&scope.map.on("dragend",function(){scope[attrs.onReposition](scope.map.getBounds())}),attrs.onZoom&&scope.map.on("zoomend",function(){scope[attrs.onZoom](scope.map.getBounds())})},template:'<div class="angular-mapbox-map" ng-transclude></div>',controller:["$scope",function($scope){$scope.markers=[],$scope.featureLayers=[],_mapboxMap=$q.defer(),$scope.getMap=this.getMap=function(){return _mapboxMap.promise},L.MarkerClusterGroup&&($scope.clusterGroup=new L.MarkerClusterGroup,this.getMap().then(function(map){map.addLayer($scope.clusterGroup)})),this.$scope=$scope}]}}]),angular.module("angularMapbox").directive("marker",["$compile",function($compile){var _colors={navy:"#001f3f",blue:"#0074d9",aqua:"#7fdbff",teal:"#39cccc",olive:"#3d9970",green:"#2ecc40",lime:"#01ff70",yellow:"#ffdc00",orange:"#ff851b",red:"#ff4136",fuchsia:"#f012be",purple:"#b10dc9",maroon:"#85144b",white:"white",silver:"#dddddd",gray:"#aaaaaa",black:"#111111"};return{restrict:"E",require:"^mapbox",transclude:!0,scope:!0,link:function(scope,element,attrs,controller,transclude){function setStyleOptions(attrs,default_opts){var opts=default_opts||{};return attrs.size&&(opts["marker-size"]=attrs.size),attrs.color&&(opts["marker-color"]="#"===attrs.color[0]?attrs.color:_colors[attrs.color]||attrs.color),attrs.icon&&(opts["marker-symbol"]=attrs.icon),opts}var marker,opts={draggable:void 0!==attrs.draggable},style=setStyleOptions(attrs),addMarker=function(map,latlng,popupContent,opts,style){opts=opts||{};var marker=L.mapbox.marker.style({properties:style},latlng);return popupContent&&popupContent.length>0&&marker.bindPopup(popupContent),controller.$scope.isClusteringMarkers&&opts.excludeFromClustering!==!0?controller.$scope.clusterGroup.addLayer(marker):marker.addTo(map),opts.draggable&&marker.dragging.enable(),controller.$scope.markers.push(marker),controller.$scope.fitMapToMarkers(),marker},addCurrentLocation=function(map,popupContent,opts,style){style=setStyleOptions(style,{"marker-color":"#000","marker-symbol":"star"}),opts.excludeFromClustering=!0,map.on("locationfound",function(e){marker=addMarker(map,[e.latlng.lat,e.latlng.lng],null,opts,style)}),map.locate()};controller.getMap().then(function(map){map.on("popupopen",function(){var popup=angular.element(document.getElementsByClassName("leaflet-popup-content"));$compile(popup)(scope),scope.$$phase||scope.$digest()}),setTimeout(function(){for(var popupHTML="",transcluded=transclude(scope,function(){}),i=0;i<transcluded.length;i++)void 0!==transcluded[i].outerHTML&&(popupHTML+=transcluded[i].outerHTML);if(void 0!==attrs.currentLocation)addCurrentLocation(map,null,opts,style);else{if(popupHTML){var popup=angular.element(popupHTML);$compile(popup)(scope),scope.$$phase||scope.$digest();var newPopupHTML="";for(i=0;i<popup.length;i++)newPopupHTML+=popup[i].outerHTML;marker=addMarker(map,[attrs.lat,attrs.lng],newPopupHTML,opts,style)}else marker=addMarker(map,[attrs.lat,attrs.lng],null,opts,style);element.bind("$destroy",function(){controller.$scope.isClusteringMarkers?controller.$scope.clusterGroup.removeLayer(marker):map.removeLayer(marker)})}},0)})}}}]);